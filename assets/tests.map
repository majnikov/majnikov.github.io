{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","webapp/tests/acceptance/charge-base-scenario-test.js","webapp/tests/acceptance/charge-fail-scenarios-test.js","webapp/tests/acceptance/visit-charge-page-test.js","webapp/tests/acceptance/visit-operators-list-test.js","webapp/tests/app.lint-test.js","webapp/tests/helpers/destroy-app.js","webapp/tests/helpers/ember-i18n/test-helpers.js","webapp/tests/helpers/ember-power-select.js","webapp/tests/integration/components/charge-form-test.js","webapp/tests/test-helper.js","webapp/tests/tests.lint-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('webapp/tests/acceptance/charge-base-scenario-test', ['qunit', '@ember/test-helpers', 'ember-qunit', 'ember-cli-mirage/test-support/setup-mirage', 'webapp/mirage/fixtures/operators'], function (_qunit, _testHelpers, _emberQunit, _setupMirage, _operators) {\n  'use strict';\n\n  const SELECTORS = {\n    chargeAmountField: '#chargeAmountField',\n    chargePhoneField: '#chargePhoneField',\n    chargeSubmitButton: '#chargeSubmitButton'\n  };\n\n  (0, _qunit.module)('Acceptance | charge base scenario', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _setupMirage.default)(hooks);\n\n    (0, _qunit.test)('charge base scenario', async function (assert) {\n\n      const notifyMock = Ember.Service.extend({\n        setTarget() {\n          return null;\n        },\n        success() {\n          assert.ok('success', 'success message was shown');\n        }\n      });\n\n      this.owner.register('service:notify', notifyMock);\n\n      assert.expect(3);\n\n      const operator = _operators.default[0];\n\n      await (0, _testHelpers.visit)('/');\n\n      await (0, _testHelpers.click)(this.element.querySelector(`#${operator.code}`));\n\n      assert.equal((0, _testHelpers.currentURL)(), `/operators/${operator.id}/pay`, 'visit charge page');\n\n      await (0, _testHelpers.fillIn)(SELECTORS.chargePhoneField, '1234567890');\n      await (0, _testHelpers.fillIn)(SELECTORS.chargeAmountField, '500');\n\n      await (0, _testHelpers.click)(SELECTORS.chargeSubmitButton);\n\n      assert.equal((0, _testHelpers.currentURL)(), '/operators', 'redirected to the root page');\n    });\n  });\n});","define('webapp/tests/acceptance/charge-fail-scenarios-test', ['qunit', '@ember/test-helpers', 'ember-qunit', 'ember-cli-mirage/test-support/setup-mirage', 'webapp/mirage/fixtures/operators'], function (_qunit, _testHelpers, _emberQunit, _setupMirage, _operators) {\n  'use strict';\n\n  const SELECTORS = {\n    chargeAmountField: '#chargeAmountField',\n    chargePhoneField: '#chargePhoneField',\n    chargeSubmitButton: '#chargeSubmitButton',\n\n    chargeAmountFieldErrorLabel: '.form-label--error > #chargePhoneField',\n    chargePhoneFieldErrorLabel: '.form-label--error > #chargePhoneField'\n  };\n\n  (0, _qunit.module)('Acceptance | charge fail scenarios', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _setupMirage.default)(hooks);\n\n    (0, _qunit.test)('charge empty fields scenario', async function (assert) {\n      assert.expect(4);\n\n      const operator = _operators.default[0];\n\n      await (0, _testHelpers.visit)('/');\n\n      await (0, _testHelpers.click)(this.element.querySelector(`#${operator.code}`));\n\n      assert.equal((0, _testHelpers.currentURL)(), `/operators/${operator.id}/pay`, 'visit charge page');\n\n      await (0, _testHelpers.fillIn)(SELECTORS.chargePhoneField, '');\n      await (0, _testHelpers.fillIn)(SELECTORS.chargeAmountField, '');\n\n      await (0, _testHelpers.click)(SELECTORS.chargeSubmitButton);\n\n      assert.ok(this.element.querySelector(SELECTORS.chargePhoneFieldErrorLabel), 'phone input highlighted as error');\n      assert.ok(this.element.querySelector(SELECTORS.chargeAmountFieldErrorLabel), 'amount input highlighted as error');\n\n      assert.equal((0, _testHelpers.currentURL)(), `/operators/${operator.id}/pay`, 'stayed on the charge page');\n    });\n  });\n});","define('webapp/tests/acceptance/visit-charge-page-test', ['qunit', '@ember/test-helpers', 'ember-qunit', 'ember-cli-mirage/test-support/setup-mirage', 'webapp/mirage/fixtures/operators'], function (_qunit, _testHelpers, _emberQunit, _setupMirage, _operators) {\n  'use strict';\n\n  const SELECTORS = {\n    chargeOperatorField: '#chargeOperatorField'\n  };\n\n  (0, _qunit.module)('Acceptance | charge page', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _setupMirage.default)(hooks);\n\n    (0, _qunit.test)('visit charge page', async function (assert) {\n      assert.expect(1);\n\n      const operator = _operators.default[0];\n\n      await (0, _testHelpers.visit)(`/operators/${operator.id}/pay`);\n\n      assert.equal((0, _testHelpers.currentURL)(), `/operators/${operator.id}/pay`, 'visit charge page');\n    });\n\n    (0, _qunit.test)('charge page init operator', async function (assert) {\n      assert.expect(1);\n\n      const operator = _operators.default[0];\n\n      await (0, _testHelpers.visit)(`/operators/${operator.id}/pay`);\n\n      assert.equal(this.element.querySelector(SELECTORS.chargeOperatorField).textContent.trim(), operator.name, 'actual operator name');\n    });\n  });\n});","define('webapp/tests/acceptance/visit-operators-list-test', ['qunit', '@ember/test-helpers', 'ember-qunit', 'ember-cli-mirage/test-support/setup-mirage', 'webapp/mirage/fixtures/operators'], function (_qunit, _testHelpers, _emberQunit, _setupMirage, _operators) {\n  'use strict';\n\n  const SELECTORS = {\n    operatorItem: '.operators-list__item'\n  };\n\n  (0, _qunit.module)('Acceptance | operators list', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _setupMirage.default)(hooks);\n\n    (0, _qunit.test)('visit operators list', async function (assert) {\n      assert.expect(2);\n\n      await (0, _testHelpers.visit)('/');\n\n      assert.equal((0, _testHelpers.currentURL)(), '/operators', 'visit root page');\n\n      assert.equal(this.element.querySelectorAll(SELECTORS.operatorItem).length, _operators.default.length, 'actual operators count');\n    });\n\n    (0, _qunit.test)('go to charge page from operators list', async function (assert) {\n      assert.expect(1);\n\n      await (0, _testHelpers.visit)('/');\n\n      const operator = _operators.default[0];\n\n      await (0, _testHelpers.click)(this.element.querySelector(`#${operator.code}`));\n\n      assert.equal((0, _testHelpers.currentURL)(), `/operators/${operator.id}/pay`, 'visit charge page');\n    });\n  });\n});","define('webapp/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/app-container.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/app-container.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/charge-form.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/charge-form.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/form-button.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/form-button.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/form-container.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/form-container.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/form-error.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/form-error.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/form-input-mask.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/form-input-mask.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/form-label.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/form-label.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/form-submit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/form-submit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('const/errors.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'const/errors.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('const/phones.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'const/phones.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/operators/charge.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/operators/charge.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('locales/ru/translations.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/ru/translations.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/charge.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/charge.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/operator.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/operator.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/operators.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/operators.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/operators/charge.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/operators/charge.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/operators/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/operators/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('validations/messages.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'validations/messages.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('validators/charge.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'validators/charge.js should pass ESLint\\n\\n');\n  });\n});","define('webapp/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n    if (window.server) {\n      window.server.shutdown();\n    }\n  }\n});","define('webapp/tests/helpers/ember-i18n/test-helpers', ['ember-i18n/test-support/-private/t', 'ember-i18n/test-support/-private/assert-translation'], function (_t2, _assertTranslation2) {\n  'use strict';\n\n  // example usage: find(`.header:contains(${t('welcome_message')})`)\n  Ember.Test.registerHelper('t', function (app, key, interpolations) {\n    return (0, _t2.default)(app.__container__, key, interpolations);\n  });\n\n  // example usage: expectTranslation('.header', 'welcome_message');\n  Ember.Test.registerHelper('expectTranslation', function (app, element, key, interpolations) {\n    const text = (0, _t2.default)(app.__container__, key, interpolations);\n\n    (0, _assertTranslation2.default)(element, key, text);\n  });\n});","define('webapp/tests/helpers/ember-power-select', ['exports', 'ember-power-select/test-support/helpers'], function (exports, _helpers) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.selectChoose = exports.touchTrigger = exports.nativeTouch = exports.clickTrigger = exports.typeInSearch = exports.triggerKeydown = exports.nativeMouseUp = exports.nativeMouseDown = exports.findContains = undefined;\n  exports.default = deprecatedRegisterHelpers;\n\n\n  function deprecateHelper(fn, name) {\n    return function (...args) {\n      (true && !(false) && Ember.deprecate(`DEPRECATED \\`import { ${name} } from '../../tests/helpers/ember-power-select';\\` is deprecated. Please, replace it with \\`import { ${name} } from 'ember-power-select/test-support/helpers';\\``, false, { until: '1.11.0', id: `ember-power-select-test-support-${name}` }));\n\n      return fn(...args);\n    };\n  }\n\n  let findContains = deprecateHelper(_helpers.findContains, 'findContains');\n  let nativeMouseDown = deprecateHelper(_helpers.nativeMouseDown, 'nativeMouseDown');\n  let nativeMouseUp = deprecateHelper(_helpers.nativeMouseUp, 'nativeMouseUp');\n  let triggerKeydown = deprecateHelper(_helpers.triggerKeydown, 'triggerKeydown');\n  let typeInSearch = deprecateHelper(_helpers.typeInSearch, 'typeInSearch');\n  let clickTrigger = deprecateHelper(_helpers.clickTrigger, 'clickTrigger');\n  let nativeTouch = deprecateHelper(_helpers.nativeTouch, 'nativeTouch');\n  let touchTrigger = deprecateHelper(_helpers.touchTrigger, 'touchTrigger');\n  let selectChoose = deprecateHelper(_helpers.selectChoose, 'selectChoose');\n\n  function deprecatedRegisterHelpers() {\n    (true && !(false) && Ember.deprecate(\"DEPRECATED `import registerPowerSelectHelpers from '../../tests/helpers/ember-power-select';` is deprecated. Please, replace it with `import registerPowerSelectHelpers from 'ember-power-select/test-support/helpers';`\", false, { until: '1.11.0', id: 'ember-power-select-test-support-register-helpers' }));\n\n    return (0, _helpers.default)();\n  }\n\n  exports.findContains = findContains;\n  exports.nativeMouseDown = nativeMouseDown;\n  exports.nativeMouseUp = nativeMouseUp;\n  exports.triggerKeydown = triggerKeydown;\n  exports.typeInSearch = typeInSearch;\n  exports.clickTrigger = clickTrigger;\n  exports.nativeTouch = nativeTouch;\n  exports.touchTrigger = touchTrigger;\n  exports.selectChoose = selectChoose;\n});","define('webapp/tests/integration/components/charge-form-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  const SELECTORS = {\n    chargeAmountField: '#chargeAmountField',\n    chargeOperatorField: '#chargeOperatorField',\n    chargePhoneField: '#chargePhoneField',\n    chargeBackButton: '#chargeBackButton',\n    chargeSubmitButton: '#chargeSubmitButton'\n  };\n\n  (0, _qunit.module)('Integration | Component | charge-form', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      assert.expect(5);\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"kyjlCqYp\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"charge-form\\\",null,null,{\\\"statements\\\":[[0,\\\"        charge-form text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.querySelectorAll(SELECTORS.chargeOperatorField).length, 1, 'charge-form contains one operator field');\n      assert.equal(this.element.querySelectorAll(SELECTORS.chargePhoneField).length, 1, 'charge-form contains one phone field');\n      assert.equal(this.element.querySelectorAll(SELECTORS.chargeAmountField).length, 1, 'charge-form contains one amount field');\n\n      assert.equal(this.element.querySelectorAll(SELECTORS.chargeBackButton).length, 1, 'charge-form contains one back button');\n      assert.equal(this.element.querySelectorAll(SELECTORS.chargeSubmitButton).length, 1, 'charge-form contains one submit button');\n    });\n  });\n});","define('webapp/tests/test-helper', ['webapp/app', 'webapp/config/environment', '@ember/test-helpers', 'ember-qunit'], function (_app, _environment, _testHelpers, _emberQunit) {\n  'use strict';\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n\n  (0, _emberQunit.start)();\n});","define('webapp/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('acceptance/charge-base-scenario-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/charge-base-scenario-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/charge-fail-scenarios-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/charge-fail-scenarios-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/visit-charge-page-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/visit-charge-page-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/visit-operators-list-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/visit-operators-list-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/charge-form-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/charge-form-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n});","define('webapp/config/environment', [], function() {\n  var prefix = 'webapp';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('webapp/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}