{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","coinsph/tests/acceptance/signup-base-scenario-test.js","coinsph/tests/acceptance/signup-validators-test.js","coinsph/tests/lint/app.lint-test.js","coinsph/tests/lint/templates.template.lint-test.js","coinsph/tests/lint/tests.lint-test.js","coinsph/tests/test-helper.js","coinsph/tests/unit/adapters/application-adapter-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"coinsph/tests/acceptance/signup-base-scenario-test\", [\"qunit\", \"@ember/test-helpers\", \"ember-qunit\", \"ember-cli-mirage/test-support/setup-mirage\"], function (_qunit, _testHelpers, _emberQunit, _setupMirage) {\n  \"use strict\";\n\n  const SELECTORS = {\n    username: '#username',\n    email: '#email',\n    password: '#password',\n    passwordConfirm: '#passwordConfirm',\n    submit: '#submit',\n    thanks: '#thanks'\n  };\n  (0, _qunit.module)('Acceptance | sign-up base scenario', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _setupMirage.default)(hooks);\n    (0, _qunit.test)('sign-up base scenario', async function (assert) {\n      await (0, _testHelpers.visit)('/');\n      assert.equal((0, _testHelpers.currentURL)(), '/sign-up', 'Redirected to the sign-up page');\n      assert.notOk((0, _testHelpers.find)(SELECTORS.thanks), 'Thanks message is hidden');\n      await (0, _testHelpers.fillIn)(SELECTORS.username, 'test name');\n      await (0, _testHelpers.fillIn)(SELECTORS.email, 'test@test.com');\n      await (0, _testHelpers.fillIn)(SELECTORS.password, '12345');\n      await (0, _testHelpers.fillIn)(SELECTORS.passwordConfirm, '12345');\n      await (0, _testHelpers.click)(SELECTORS.submit);\n      assert.equal((0, _testHelpers.currentURL)(), '/', 'Redirected to the root page');\n      assert.ok((0, _testHelpers.find)(SELECTORS.thanks), 'Thanks message was shown');\n    });\n  });\n});","define(\"coinsph/tests/acceptance/signup-validators-test\", [\"qunit\", \"@ember/test-helpers\", \"ember-qunit\", \"ember-cli-mirage/test-support/setup-mirage\"], function (_qunit, _testHelpers, _emberQunit, _setupMirage) {\n  \"use strict\";\n\n  const SELECTORS = {\n    username: '#username',\n    email: '#email',\n    password: '#password',\n    passwordConfirm: '#passwordConfirm',\n    submit: '#submit',\n    thanks: '#thanks'\n  };\n  const CLASSES = {\n    error: 'form-input__invalid'\n  };\n  (0, _qunit.module)('Acceptance | sign-up validators test', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _setupMirage.default)(hooks);\n    (0, _qunit.test)('sign-up validators', async function (assert) {\n      await (0, _testHelpers.visit)('/');\n      assert.notOk((0, _testHelpers.find)(\"\".concat(SELECTORS.username, \".\").concat(CLASSES.error)), 'username field without error class');\n      assert.notOk((0, _testHelpers.find)(\"\".concat(SELECTORS.email, \".\").concat(CLASSES.error)), 'email field without error class');\n      assert.notOk((0, _testHelpers.find)(\"\".concat(SELECTORS.password, \".\").concat(CLASSES.error)), 'password field without error class');\n      assert.notOk((0, _testHelpers.find)(\"\".concat(SELECTORS.passwordConfirm, \".\").concat(CLASSES.error)), 'passwordConfirm field without error class');\n      assert.ok((0, _testHelpers.find)(\"\".concat(SELECTORS.submit, \":disabled\")), 'submit button is disabled');\n      await (0, _testHelpers.blur)(SELECTORS.username);\n      await (0, _testHelpers.blur)(SELECTORS.email);\n      await (0, _testHelpers.blur)(SELECTORS.password);\n      await (0, _testHelpers.blur)(SELECTORS.passwordConfirm);\n      assert.ok((0, _testHelpers.find)(\"\".concat(SELECTORS.username, \".\").concat(CLASSES.error)), 'username field has error class');\n      assert.ok((0, _testHelpers.find)(\"\".concat(SELECTORS.email, \".\").concat(CLASSES.error)), 'email field has error class');\n      assert.ok((0, _testHelpers.find)(\"\".concat(SELECTORS.password, \".\").concat(CLASSES.error)), 'password field has error class');\n      assert.ok((0, _testHelpers.find)(\"\".concat(SELECTORS.passwordConfirm, \".\").concat(CLASSES.error)), 'passwordConfirm field has error class');\n    });\n  });\n});","define(\"coinsph/tests/lint/app.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | app');\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('adapters/user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/user.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/errors-explanation.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/errors-explanation.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/form/form-input.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/form/form-input.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/login-form.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/login-form.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('const/errors.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'const/errors.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/sign-up.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/sign-up.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('models/user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/user.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('validators/sign-up.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'validators/sign-up.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('validators/unique.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'validators/unique.js should pass ESLint\\n\\n');\n  });\n});","define(\"coinsph/tests/lint/templates.template.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('TemplateLint');\n  QUnit.test('coinsph/templates/application.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'coinsph/templates/application.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('coinsph/templates/components/errors-explanation.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'coinsph/templates/components/errors-explanation.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('coinsph/templates/components/form/form-input.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'coinsph/templates/components/form/form-input.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('coinsph/templates/components/login-form.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'coinsph/templates/components/login-form.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('coinsph/templates/index.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'coinsph/templates/index.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('coinsph/templates/sign-up.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'coinsph/templates/sign-up.hbs should pass TemplateLint.\\n\\n');\n  });\n});","define(\"coinsph/tests/lint/tests.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | tests');\n  QUnit.test('acceptance/signup-base-scenario-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/signup-base-scenario-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('acceptance/signup-validators-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/signup-validators-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/adapters/application-adapter-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-adapter-test.js should pass ESLint\\n\\n');\n  });\n});","define(\"coinsph/tests/test-helper\", [\"coinsph/app\", \"coinsph/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define(\"coinsph/tests/unit/adapters/application-adapter-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Adapter | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('should camelize parsed error keys', function (assert) {\n      const appAdapter = this.owner.lookup('adapter:application');\n      const data = {\n        errors: {\n          username: {\n            message: 'test'\n          },\n          some_field: {\n            message: 'test2'\n          }\n        }\n      };\n      const dataCopy = JSON.parse(JSON.stringify(data));\n      appAdapter.parseErrorResponse(dataCopy);\n      Object.keys(data.errors).forEach(key => {\n        const camelized = dataCopy.errors[Ember.String.camelize(key)].message;\n        const original = data.errors[key].message;\n        assert.ok(camelized === original, \"\".concat(key, \" camelized\"));\n      });\n    });\n  });\n});","define('coinsph/config/environment', [], function() {\n  var prefix = 'coinsph';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('coinsph/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjnBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}